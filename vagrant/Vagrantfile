# -*- mode: ruby -*-
# vi: set ft=ruby :

# For proper OpenStack network setup it's necessary to have a VirtualBox host-only network with:
#
# ip address:  172.24.4.225
# ip netmask:  255.255.255.0
# dhcp:        off
#
# Vagrant will auto-create the VirtualBox host-only network for us when using the 'private-network'
# setting but it will only allow us to set the ip address of the vnic and the ip address of the
# network adapter, *if* the 172.24.4.x network does not already exist. If at startup VirtualBox
# already has a 172.24.4.x host-only network Vagrant will not make any changes to that network,
# such as the required ip of the Network Adapter (adapter_ip:). If the existing 172.24.4.x network
# is using something other than 172.24.4.225 as it's IP Address then the Neutron network setup in
# this VM will fail to route packets into our OpenStack server and managed VM's. In order for the
# Neutron networking setup to route traffic through the host machine and back to the OpenStack server
# and managed vm's, the host-only network that is assigned "Adapter 3" on the VM must be reconfigured
# to match the settings listed above.
#
# OpenStack's Neutron networking will make the ip range 172.24.4.3 - 172.24.4.53 available as
# floating ips and OpenStack will create a virtual network gateway @172.24.4.1 and a virtual dhcp
# server @ 172.24.4.2 to handle assigning floating ip's and routing traffic between OpenStack's
# internally managed virtual network (10.0.0.x) where it places managed VM's and the "public"
# network (172.24.4.x).
#
# I'm not positive b/c I'm not a network expert but I believe the problem is due to the desire of
# OpenStack to set the virtual network gateway to 172.24.4.1 which causes problems when the
# VirtualBox managed network adapter obtains that same ip address causing routing problems in
# OpenStack's virtual network services b/c the "router" that Neutron is relying on for proper
# network relying of packets between external and internal networks cannot be bound to the
# specific IP address it expects and wants (172.24.4.1).
#
# The following ruby code, which only runs when executing a 'vagrant up' command, relies on the
# VirtualBox command line tool 'vboxmanage' which is typically installed onto your system path
# when you install VirtualBox. We use vboxmanage commands to locate any pre-existing networks using
# the 172.24.4.x address space and determine if we need to reconfigure the network to use the
# 172.24.4.225 ip address for the network adapter. The code allows this Vagrantfile to work in a
# consistent and repeatable way without manual configuration by the user.
#
# TODO: Find a way to *remember* the original adapter ip address and upon exit, restore the
# original value.  This way we would not potentially be *breaking* any other vm's that are relying
# on that adapter ip to always be 172.24.4.1 and not the address we reconfigure it to 172.24.4.225
#

if ARGV[0] == "up"

  # only perform network reconfiguration on 'vagrant up' command when using virtualbox provider
  provider = "virtualbox" # default

  # did the user pass in a "--provider" flag?
  passed_provider = false
  ARGV.each do|a|
      if a == "--provider"
        passed_provider = true
      elsif passed_provider
        provider = a
        break
      end
  end

  # does the user have the VAGRANT_DEFAULT_PROVIDER environment variable set
  if !passed_provider
    env_provider = `echo $VAGRANT_DEFAULT_PROVIDER`
    puts("VAGRANT_DEFAULT_PROVIDER=#{env_provider}")
    if !env_provider.nil?
      provider = env_provider
    end
  end

  puts("provider=#{provider}")

  # only perform network reconfiguration if using the 'virtualbox' provider
  if provider == "virtualbox"

    # track name of host-only network that uses the 172.24.4.x address space
    target_hostonlyif = "not_found"

    # track boolean to indicate if we should perform the *reconfigure* network actions
    target_hostonlyif_configure = true

    # use 'vboxmanage list hostonlyifs' to find existing 172.24.4.x VirtualBox host-only network
    hostonlyifs_stdout = `vboxmanage list hostonlyifs`

    # hostonlyifs_stdout e.g.:
    # Name:            vboxnet0
    # GUID:            786f6276-656e-4074-8000-0a0027000000
    # DHCP:            Disabled
    # IPAddress:       172.24.4.225
    # NetworkMask:     255.255.255.0
    # IPV6Address:
    # IPV6NetworkMaskPrefixLength: 0
    # HardwareAddress: 0a:00:27:00:00:00
    # MediumType:      Ethernet
    # Status:          Up
    # VBoxNetworkName: HostInterfaceNetworking-vboxnet0
    #
    # Name:            vboxnet1
    # GUID:            786f6276-656e-4174-8000-0a0027000001
    # DHCP:            Disabled
    # IPAddress:       192.168.27.1
    # NetworkMask:     255.255.255.0
    # IPV6Address:
    # IPV6NetworkMaskPrefixLength: 0
    # HardwareAddress: 0a:00:27:00:00:01
    # MediumType:      Ethernet
    # Status:          Up
    # VBoxNetworkName: HostInterfaceNetworking-vboxnet1
    #

    hostonlyifs_stdout.split("\n\n").each{ |hostonlyif_stdout| # slit on blank line
      network_name = "not_found" # used to track current network name
      hostonlyif_stdout.split("\n").each{ |hostonlyif_detail_line| # split on new line
        hostonlyif = hostonlyif_detail_line.split(':') # split on ':'

        if hostonlyif[0].to_s.strip == "Name"
          network_name = hostonlyif[1].to_s.strip # track current network name
        end

        if hostonlyif[0].to_s.strip == "IPAddress"
          if hostonlyif[1].to_s.strip.start_with?("172.24.4.") # does network use 172.24.4.x address space
            target_hostonlyif = network_name
            if hostonlyif[1].to_s.strip == "172.24.4.225" # only reconfigure if ip != 172.24.4.225
              target_hostonlyif_configure = false
            end
          end
        end
      }
    }

    # if we found an existing 172.24.4.x network then reconfigure it
    # with ip address 172.24.4.225 and
    # with netmask 255.255.255.0
    if target_hostonlyif != "not_found" && target_hostonlyif_configure
      puts("stackinabox ==> Configuring VirtualBox '172.24.4.x' host-only networks for use with stackinabox.")
      puts("stackinabox ==>      found '#{target_hostonlyif}' host-only network using 172.24.4.x address space")
      puts("stackinabox ==>      setting ip address to 172.24.4.225...")
      puts("stackinabox ==>      setting ip netmask to 255.255.255.0...")
      results = `vboxmanage hostonlyif ipconfig #{target_hostonlyif} --ip 172.24.4.225 --netmask 255.255.255.0`
      if $?.to_i == 0
        puts("stackinabox ==>      Successfully completed network configuration!")
      else
        puts("stackinabox ==>      Error occurred durring network configuration:")
        puts("stackinabox ==>      #{results}")
        exit $?.to_i
      end
    end

  end # if provider == "virtualbox"
end

personalization = File.expand_path("../Personalization", __FILE__)
load personalization

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  if Vagrant.has_plugin?("vagrant-cachier")
     config.cache.scope = :box # cache at the base box level

     # setup apt-get cache
     config.cache.enable :apt

     # setup PIP cache for DevStack resources
     config.vm.provision "file", source: "../scripts/stackinabox/pip.conf", destination: "/home/vagrant/.pip/pip.conf"
     config.cache.enable :generic, { "pip" => { :cache_dir => "/var/cache/pip" } }
     
     if $use_nfs
       config.cache.synced_folder_opts = {
         type: :nfs,
         mount_options: ['rw', 'vers=3', 'tcp', 'nolock']
       }
     }

  else
     print "vagrant-cachier plugin has not been found."
     print "You can install it by `vagrant plugin install vagrant-cachier`"
  end

  config.vm.define "stackinabox" do |stackinabox|

    config.vm.synced_folder "..", "/vagrant", :nfs => $use_nfs
    config.ssh.forward_agent = true
    config.ssh.insert_key = false

    # Every Vagrant virtual environment requires a base box
    stackinabox.vm.box = $box
    stackinabox.vm.box_url = $box_url
    stackinabox.vm.box_download_insecure = true

    stackinabox.vm.hostname = "stackinabox"

    # eth0, this is the vbox "management" network (10.0.2.x), auto created/configured by vagrant, uses NAT
    # not defined here b/c vbox creates this network behind the scenes

    # eth1, this will be OpenStacks's "management" network autoconfigured on vm by vbox
    stackinabox.vm.network "private_network", ip: "192.168.27.100", adapter_ip: "192.168.27.1", netmask: "255.255.255.0", auto_config: true

    # eth2, this will be OpenStack's "public" network configured on vm by stackinabox.sh script and bridged to OpenvSwitch on VM
    stackinabox.vm.network "private_network", ip: "172.24.4.225", adapter_ip: "172.24.4.225", netmask: "255.255.255.0", auto_config: false

    # Provider-specific configuration
    stackinabox.vm.provider "virtualbox" do |vb|
      # Don't boot with headless mode
      #vb.gui = true

      vb.name = "stackinabox" # sets the name that virtual box will show in it's UI

      # Use VBoxManage to customize the VM.
      vb.customize ["modifyvm", :id, "--ioapic", "on"] # turn on I/O APIC
      vb.customize ["modifyvm", :id, "--cpus", "#{$cpus}"] # set number of vcpus
      vb.customize ["modifyvm", :id, "--memory", "#{$memory}"] # set amount of memory allocated vm memory
      vb.customize ["modifyvm", :id, "--hwvirtex", "on"] # turn on host hardware virtualization extensions (VT-x|AMD-V)
      vb.customize ["modifyvm", :id, "--ostype", "Ubuntu_64"] # set guest OS type
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"] # enables DNS resolution from guest using host's DNS
      vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"] # turn on promiscuous mode on nic 3
      vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
      vb.customize ["modifyvm", :id, "--nictype2", "virtio"]
      vb.customize ["modifyvm", :id, "--nictype3", "virtio"]
      vb.customize ["modifyvm", :id, "--longmode", "on"] # enables long mode (64 bit mode in GUEST OS)
      vb.customize ["modifyvm", :id, "--hpet", "on"] # enables a High Precision Event Timer (HPET)
      vb.customize ["modifyvm", :id, "--nestedpaging", "on"] # if --hwvirtex is on, this enables nested paging
      vb.customize ["modifyvm", :id, "--largepages", "on"] # if --hwvirtex & --nestedpaging are on
      vb.customize ["modifyvm", :id, "--vtxvpid", "on"] # if --hwvirtex on
      vb.customize ["modifyvm", :id, "--vtxux", "on"] # if --vtux on (Intel VT-x only) enables unrestricted guest mode
      vb.customize ["modifyvm", :id, "--boot1", "disk"] # tells vm to boot from disk only
      vb.customize ["modifyvm", :id, "--audio", "none"]
      vb.customize ["modifyvm", :id, "--clipboard", "disabled"]
      vb.customize ["modifyvm", :id, "--usbehci", "off"]
      vb.customize ["modifyvm", :id, "--vrde", "off"]

    end

    # simplify "provider" determination (changes depending on if on windows/linux or mac os)
    if (/darwin/ =~ RUBY_PLATFORM) != nil
      vmware = "vmware_fusion"
    else
      vmware = "vmware_workstation"
    end

    stackinabox.vm.provider vmware do |vw|
      # Don't boot with headless mode
      #vw.gui = true

      vw.vmx["displayName"] = "stackinabox" # sets the name that virtual box will show in it's UI
      vw.vmx["numvcpus"] = "4" # set number of vcpus
      vw.vmx["memsize"] = "8192" # set amount of memory allocated vm memory
      vw.vmx["hypervisor.cpuid.v0"] = "FALSE"
      vw.vmx["mce.enable"] = "TRUE"
      vw.vmx["vhv.enable"] = "TRUE" # turn on host hardware virtualization extensions (VT-x|AMD-V)
      vw.vmx["guestOS"] = "ubuntu-64" # set guest OS type
      vw.vmx["virtualhw.version"] = "8"
      vw.vmx["config.version"] = "8"

      # needed to ensure when machine is booted for first time it is assigned the correct network
      if vmware == "vmware_fusion"
        vw.vmx["ethernet1.addresstype"] = "static"
        vw.vmx["ethernet1.connectiontype"] = "custom"
        vw.vmx["ethernet1.present"] = "TRUE"
        vw.vmx["ethernet1.virtualdev"] = "e1000"
        vw.vmx["ethernet1.vnet"] = "vmnet2"
        vw.vmx["ethernet1.address"] = "00:50:56:36:B2:20"
        vw.vmx["ethernet2.addresstype"] = "static"
        vw.vmx["ethernet2.connectiontype"] = "custom"
        vw.vmx["ethernet2.present"] = "TRUE"
        vw.vmx["ethernet2.virtualdev"] = "e1000"
        vw.vmx["ethernet2.vnet"] = "vmnet3"
        vw.vmx["ethernet2.address"] = "00:50:56:3F:92:84"
      end

      # Fusion Performance Hacks
      vw.vmx["logging"] = "FALSE"
      vw.vmx["MemTrimRate"] = "0"
      vw.vmx["MemAllowAutoScaleDown"] = "FALSE"
      vw.vmx["mainMem.backing"] = "swap"
      vw.vmx["sched.mem.pshare.enable"] = "FALSE"
      vw.vmx["snapshot.disabled"] = "TRUE"
      vw.vmx["isolation.tools.unity.disable"] = "TRUE"
      vw.vmx["unity.allowCompostingInGuest"] = "FALSE"
      vw.vmx["unity.enableLaunchMenu"] = "FALSE"
      vw.vmx["unity.showBadges"] = "FALSE"
      vw.vmx["unity.showBorders"] = "FALSE"
      vw.vmx["unity.wasCapable"] = "FALSE"
      vw.vmx["priority.grabbed"] = "high"
      vw.vmx["priority.ungrabbed"] = "high"
      vw.vmx["mainmem.backing"] = "swap"
      vw.vmx["mainMem.allow8GB"] = "TRUE"
    end

    stackinabox.vm.provision "shell", privileged: true, keep_color: false, path: "../scripts/stackinabox/init.sh"
  end

end
